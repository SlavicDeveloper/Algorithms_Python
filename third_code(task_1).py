"""Код, выводящий на экран тип объекта из списка"""
from memory_profiler import profile


# Версия без оптимизации (19.3 MiB (+ инкремент) - неоптимизированная)
@profile
def type_el():
    """Итерируем по спискус целью определения типа каждого объекта"""
    el_list = []
    num_list = [15 * 3, 15 / 3, 15 // 2, 15 ** 2]
    for element in num_list:
        el_list.append(type(element))
    return el_list


print(type_el())

"""Код, выводящий на экран тип объекта из списка"""
from memory_profiler import profile


# Версия с оптимизацией (19.2 MiB - оптимизированная)
# Использовалась функция map() для итерации, чтобы сэкономить память
# Конкретно в случае с данным примером можно заметить, что оптимизация незначительна, однако
# на больших объемах данных разница будет существенной
@profile
def type_of_el():
    """При помощи функции map() определяем тип каждого объекта"""
    num_list_1 = [15 * 3, 15 / 3, 15 // 2, 15 ** 2]
    obj = map(type, num_list_1)
    print(*obj)


type_of_el()
